{
	"info": {
		"_postman_id": "41c2de83-48e2-46bb-9073-2a9fbe4fc5c3",
		"name": "NGSI-LD Subscriptions",
		"description": "This tutorial teaches NGSI-LD users about how to create and manage context data subscriptions. The tutorial builds on the\nentities and [Smart Farm](https://github.com/FIWARE/tutorials.Getting-Started/tree/NGSI-LD)\napplication created in the previous examples to enable users to\nunderstand the [NGSI-LD](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf) Subscribe/Notify paradigm and how to\nuse NGSI subscriptions within their own code.\n\nThe tutorial refers to devices and actions made within the browser combined with [cUrl](https://ec.haxx.se/)\ncommands. The cUrl commands are also available as\n[Postman documentation](https://github.com/FIWARE/tutorials.Subscriptions/tree/NGSI-LD).\n\nThe `docker-compose` file for this tutorial can be found on GitHub: \n\n![GitHub](https://fiware.github.io/tutorials.Subscriptions/icon/GitHub-Mark-32px.png) [FIWARE 106: Subscribing to Changes in Context](https://github.com/FIWARE/tutorials.Subscriptions/tree/NGSI-LD)\n\n# Subscribing to Changes of State\n\n> 'Another sandwich!' said the King.\n>\n> 'There's nothing but hay left now,' the Messenger said, peeping into the bag.\n>\n> 'Hay, then,' the King murmured in a faint whisper.\n>\n> Alice was glad to see that it revived him a good deal. 'There's nothing like eating hay when you're faint,' he remarked to her, as he munched away.\n>\n> — Lewis Carroll (Through the Looking-Glass and What Alice Found There)\n\nWithin the FIWARE platform, an entity represents the state of a physical or conceptual object which exists in the real\nworld. Every smart solution needs to know the current state of these object at any given moment in time.\n\nThe context of each of these entities is constantly changing. For example, within the smart farm example, the\ncontext will change as animals and vehicles move, soil dries out, tasks are allocated on the farm and completed and so on. For a smart solution based on IoT\nsensor data, this issue is even more pressing as the system will constantly be reacting to changes in the real world.\n\nUntil now all the operations we have used to change the state of the system have been **synchronous** - changes have\nbeen made by directly by a user or application and they have been informed of the result. The Orion Context Broker\noffers also an **asynchronous** notification mechanism - applications can subscribe to changes of context information so\nthat they can be informed when something happens. This means the application does not need to continuously poll or\nrepeat query requests.\n\nUse of the subscription mechanism will therefore reduce both the volume of requests and amount of data being passed\nbetween components within the system. This reduction in network traffic will improve the overall responsiveness.\n\n## Entities within a smart Agrifood system\n\nThe relationship between our entities is defined as shown:\n\n![](https://fiware.github.io/tutorials.Subscriptions/img/ngsi-ld-entities.png)\n\n## Farm Management Information System frontend\n\nIn a previous tutorial, a simple Node.js Express application\nwas created. This tutorial will use the monitor page to watch the status of recent requests, and the devices page to alter the machines on the farm. Once the services are running these pages can be accessed from the following URLs:\n\n#### Event Monitor\n\nThe event monitor can be found at: `http://localhost:3000/app/monitor`\n\n![FIWARE Monitor](https://fiware.github.io/tutorials.Subscriptions/img/monitor.png)\n\n#### Device Monitor\n\nFor the purpose of this tutorial, a series of dummy agricultural IoT devices have been created, which will be attached\nto the context broker. Details of the architecture and protocol used can be found in the\n[IoT Sensors tutorial](https://github.com/FIWARE/tutorials.IoT-Sensors/tree/NGSI-LD) The state of each device can be\nseen on the UltraLight device monitor web page found at: `http://localhost:3000/device/monitor`\n\n![FIWARE Monitor](https://fiware.github.io/tutorials.Subscriptions/img/farm-devices.png)\n\n# Architecture\n\nThis application will make use of two FIWARE components - the\n[Orion-LD Context Broker](https://fiware-orion.readthedocs.io/en/latest/)and the\n[IoT Agent for UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/). Usage of any NGSI-LD Context Broker is sufficient\nfor an application to qualify as _“Powered by FIWARE”_.\n\nCurrently, the Orion-LD Context Broker relies on open source [MongoDB](https://www.mongodb.com/) technology to keep\npersistence of the context data it holds. To request context data from external sources, a simple **Context Provider\nNGSI proxy** has also been added. To visualize and interact with the Context we will add a simple Express **Frontend**\napplication\n\nTherefore, the architecture will consist of four elements:\n\n-   The [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which will receive requests using\n    [NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/gitlab/NGSI-LD/NGSI-LD/raw/master/spec/updated/full_api.json)\n-   The FIWARE [IoT Agent for UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/) which will receive\n    southbound requests using\n    [NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/gitlab/NGSI-LD/NGSI-LD/raw/master/spec/updated/full_api.json)\n    and convert them to\n    [UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n    commands for the devices\n-   The underlying [MongoDB](https://www.mongodb.com/) database:\n    -   Used by the Orion Context Broker to hold context data information such as data entities, subscriptions and\n        registrations\n-   The **Tutorial Application** does the following:\n    -   Offers static `@context` files defining the context entities within the system.\n    -   Acts as set of dummy [agricultural IoT devices](https://github.com/FIWARE/tutorials.IoT-Sensors/tree/NGSI-LD)\n        using the\n        [UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n        protocol running over HTTP.\n\nSince all interactions between the elements are initiated by HTTP requests, the entities can be containerized and run\nfrom exposed ports.\n\n![](https://fiware.github.io/tutorials.Subscriptions/img/architecture-ld.png)\n\nThe necessary configuration information can be seen in the services section of the associated `docker-compose.yml` file.\nIt has been described in a previous tutorial\n\n# Prerequisites\n\n## Docker\n\nTo keep things simple both components will be run using [Docker](https://www.docker.com). **Docker** is a container\ntechnology which allows to different components isolated into their respective environments.\n\n-   To install Docker on Windows follow the instructions [here](https://docs.docker.com/docker-for-windows/)\n-   To install Docker on Mac follow the instructions [here](https://docs.docker.com/docker-for-mac/)\n-   To install Docker on Linux follow the instructions [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker applications. A\n[YAML file](https://raw.githubusercontent.com/Fiware/tutorials.Entity-Relationships/master/docker-compose.yml) is used\nconfigure the required services for the application. This means all container services can be brought up in a single\ncommand. Docker Compose is installed by default as part of Docker for Windows and Docker for Mac, however Linux users\nwill need to follow the instructions found [here](https://docs.docker.com/compose/install/)\n\nYou can check your current **Docker** and **Docker Compose** versions using the following commands:\n\n```console\ndocker-compose -v\ndocker version\n```\n\nPlease ensure that you are using Docker version 24.0.x or higher and Docker Compose 2.24.x  or higher and upgrade if\nnecessary.\n\n## WSL\n\nWe will start up our services using a simple bash script. Windows users should download the [Windows Subsystem for Linux](https://learn.microsoft.com/en-us/windows/wsl/install)\nto provide a command-line functionality similar to a Linux distribution on Windows.\n\n# Start Up\n\nAll services can be initialized from the command-line by running the bash script provided within the repository. Please\nclone the repository and create the necessary images by running the commands as shown:\n\n```console\ngit clone https://github.com/FIWARE/tutorials.Subscriptions.git\ncd tutorials.Subscriptions\ngit checkout NGSI-LD\n\n./services create;\n./services orion;\n```\n\nThis command will also import seed data from the previous\nFarm Management Information System example on startup, and provision a series of dummy devices on the farm.\n\n> :information_source: **Note:** If you want to clean up and start over again you can do so with the following command:\n>\n> ```console\n> ./services stop\n> ```\n\n# Using Subscriptions\n\nTo follow the tutorial correctly please ensure you have the follow two pages available on separate tabs in your browser before you\nenter any cUrl commands.\n\n#### FMIS System\n\nDetails of various buildings around the farm can be found in the tutorial application. Open `http://localhost:3000/app/farm/urn:ngsi-ld:Building:farm001` to display a building with an associated filling sensor and thermostat.\n\n![](https://fiware.github.io/tutorials.Subscriptions/img/fmis.png)\n\n#### Event Monitor\n\nThe event monitor can be found at: `http://localhost:3000/app/monitor`.\n\n![](https://fiware.github.io/tutorials.Subscriptions/img/low-stock-farm.png)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setting up a simple Subscription",
			"item": [
				{
					"name": "Key-Values Payload",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							},
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me of low feedstock on Farm:001\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"FillingLevelSensor\"}],\n  \"watchedAttributes\": [\"filling\"],\n  \"q\": \"filling>0.6;filling<0.8;controlledAsset==urn:ngsi-ld:Building:farm001\",\n  \"notification\": {\n    \"attributes\": [\"filling\", \"controlledAsset\"],\n    \"format\": \"keyValues\",\n    \"endpoint\": {\n      \"uri\": \"http://tutorial:3000/subscription/low-stock-farm001\",\n      \"accept\": \"application/json\"\n    }\n  },\n   \"@context\": \"http://context/ngsi-context.jsonld\"\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "A new subscription can be added by making a POST request to the `/ngsi-ld/v1/subscriptions/` endpoint as shown below.\n\nThe body of the POST request consists of two parts, the first section of the request (consisting of `entities`, `type`, `watchedAttributes` and\n`q`)states that the subscription will be checked whenever the `filling`  attribute of  a **FillingSensor** entity is altered. This is further refined by the `q` parameter so that the actual subscription is only fired for any **FillingSensor** entity linked to the **Building** `urn:ngsi-ld:Building:farm001`  and only when the `filling` attribute drops below 0.8\n\nThe notification section of the body states that once the conditions of the subscription have been met, a POST\nrequest containing all affected **FillingSensor** entities will be sent to the URL\n`http://tutorial:3000/subscription/low-stock-farm001` which is handled by the contractor's own system.\n\nIt should be noted that the subscription is using the `NGSILD-Tenant` header because the IoT Devices have been provisioned using a separate tenant to the buildings for now. Tenants allow for context data to be distributed across separate databases and allow multiple application clients to access the same context broker but keep their own data sets apart.\n\nGo to the Device Monitor `http://localhost:3000/app/farm/urn:ngsi-ld:Building:farm001` and start removing hay from the barn. Nothing happens until the barn is half-empty, then a request is sent to\n`subscription/low-stock-farm001` as shown:\n\n#### `http://localhost:3000/app/monitor`\n\n![](https://fiware.github.io/tutorials.Subscriptions/img/low-stock-farm.png)\n\n#### Subscription Payload:\n\n```json\n{\n \"id\": \"urn:ngsi-ld:Notification:5fd0f3824eb81930c97005d8\",\n \"type\": \"Notification\",\n \"subscriptionId\": \"urn:ngsi-ld:Subscription:5fd0ee554eb81930c97005c1\",\n \"notifiedAt\": \"2020-12-09T15:55:46.520Z\",\n \"data\": [\n  {\n   \"id\": \"urn:ngsi-ld:Device:filling001\",\n   \"type\": \"FillingSensor\",\n   \"controllingAsset\": \"urn:ngsi-ld:Building:farm001\",\n   \"filling\": 0.59\n  }\n ]\n}\n```\n\nCode within the Farm Management Information System handles received the POST request as shown:\n\n```javascript\nconst NOTIFY_ATTRIBUTES = ['controllingAsset', 'type', 'filling', 'humidity', 'temperature'];\n\nrouter.post('/subscription/:type', (req, res) => {\n    monitor('notify', req.params.type + ' received', req.body);\n    _.forEach(req.body.data, (item) => {\n        broadcastEvents(req, item, NOTIFY_ATTRIBUTES);\n    });\n    res.status(204).send();\n});\n\nfunction broadcastEvents(req, item, types) {\n    const message = req.params.type + \" received\";\n    _.forEach(types, (type) => {\n        if (item[type]) {\n            req.app.get(\"io\").emit(item[type], message);\n        }\n    });\n}\n```\n\nThis business logic emits socket I/O events to any registered parties (such as the contractor who will then refill the barn.)"
					},
					"response": []
				},
				{
					"name": "NGSI-LD normalized Payload",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							},
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me of low feedstock on Farm:001\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"FillingLevelSensor\"}],\n  \"watchedAttributes\": [\"filling\"],\n  \"q\": \"filling>0.4;filling<0.6;controlledAsset==urn:ngsi-ld:Building:farm001\",\n  \"notification\": {\n    \"attributes\": [\"filling\", \"controlledAsset\"],\n    \"format\": \"normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://tutorial:3000/subscription/low-stock-farm001-ngsild\",\n      \"accept\": \"application/json\"\n    }\n  },\n   \"@context\": \"http://context/ngsi-context.jsonld\"\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "This second subscription will fire when the `filling` level is between 0.6 and 0.4. The `format` attribute has been altered to inform the subscriber using NGSI-LD normalized format.\n\n#### Subscription Payload:\n\nWhen a `low-stock-farm001-ngsild` event is fired, the response is as shown:\n\n```json\n{\n \"id\": \"urn:ngsi-ld:Notification:5fd0fa684eb81930c97005f3\",\n \"type\": \"Notification\",\n \"subscriptionId\": \"urn:ngsi-ld:Subscription:5fd0f69b4eb81930c97005db\",\n \"notifiedAt\": \"2020-12-09T16:25:12.193Z\",\n \"data\": [\n  {\n   \"id\": \"urn:ngsi-ld:Device:filling001\",\n   \"type\": \"FillingSensor\",\n   \"filling\": {\n    \"type\": \"Property\",\n    \"value\": 0.25,\n    \"unitCode\": \"C62\",\n    \"observedAt\": \"2020-12-09T16:25:12.000Z\"\n   },\n   \"controllingAsset\": {\n    \"type\": \"Relationship\",\n    \"object\": \"urn:ngsi-ld:Building:farm001\",\n    \"observedAt\": \"2020-12-09T16:25:12.000Z\"\n   }\n  }\n ]\n}\n```\n\nBecause the `accept` attribute has been set to `application/json`, the `@context` is sent as a `Link` header rather than an attribute within the payload body."
					},
					"response": []
				},
				{
					"name": "NGSI-v2 normalized Payload Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							},
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me of low feedstock on Farm:001\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"FillingLevelSensor\"}],\n  \"watchedAttributes\": [\"filling\"],\n  \"q\": \"filling<0.4;controlledAsset==urn:ngsi-ld:Building:farm001\",\n  \"notification\": {\n    \"attributes\": [\"filling\", \"controlledAsset\"],\n    \"format\": \"x-ngsiv2-normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://tutorial:3000/subscription/low-stock-farm001-ngsiv2\",\n      \"accept\": \"application/json\"\n    }\n  },\n   \"@context\": \"http://context/ngsi-context.jsonld\"\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "Context brokers may offer additional custom payload formats (typically prefixed with an `x-`). The Orion-LD broker offers a backwards compatible **NGSI-v2** payload option for legacy systems.\n\nThis third subscription will fire when the `filling` level is below 0.4. The `format` attribute has been altered to inform the subscriber using NGSI-v2 normalized format.\n\n#### Subscription Payload:\n\nWhen a `low-stock-farm001-ngsiv2` event is fired, the response is a normalzed NGSI-v2 payload as shown:\n\n```json\n{\n \"subscriptionId\": \"urn:ngsi-ld:Subscription:5fd1f31e8b9b83697b855a5d\",\n \"data\": [\n  {\n   \"id\": \"urn:ngsi-ld:Device:filling001\",\n   \"type\": \"https://uri.etsi.org/ngsi-ld/default-context/FillingSensor\",\n   \"https://w3id.org/saref#fillingLevel\": {\n    \"type\": \"Property\",\n    \"value\": 0.33,\n    \"metadata\": {\n     \"unitCode\":  \"C62\",\n     \"accuracy\": {\n      \"type\": \"Property\",\n      \"value\": 0.05\n     },\n     \"observedAt\": \"2020-12-10T10:11:57.000Z\"\n    }\n   },\n   \"https://uri.etsi.org/ngsi-ld/default-context/controllingAsset\": {\n    \"type\": \"Relationship\",\n    \"value\": \"urn:ngsi-ld:Building:farm001\",\n    \"metadata\": {\n     \"observedAt\": \"2020-12-10T10:11:57.000Z\"\n    }\n   }\n  }\n ]\n}\n```\n\nAs can be seen, by default the attributes are returned using URN long names. It is also possible to request that the Orion-LD context broker pre-applies a compaction operation to the payload.\n\n-  `x-nsgiv2-keyValues` - Key Value pairs with URN attribute names\n-  `x-nsgiv2-keyValues-compacted` - Key Value pairs with short name attribute aliases\n-  `x-ngsiv2-normalized` - NGSI-v2 normalized payload with URN attribute names\n-  `x-ngsiv2-normalized-compacted`- NGSI-v2 normalized payload pairs with short name attribute aliases\n\nThe set of available custom formats will vary between Context Brokers."
					},
					"response": []
				}
			],
			"description": "Within the Farm Management Information System, imagine that the farmer wants a contractor to refill his barn with hay when the level has reduced below a set level. It would be possible\nto set up the system so that the contractor was constantly polling for new information, however hay is not removed very\nfrequently so this would be a waste of resources and create a lot of unnecessary data traffic.\n\nThe alternative is to create a subscription which will POST a payload to a \"well-known\" URL whenever a value has\nchanged."
		},
		{
			"name": "Subscription CRUD Actions",
			"item": [
				{
					"name": "Create a Subscription (Product)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/ld+json"
							},
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me of all product price changes\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"Product\"}],\n  \"watchedAttributes\": [\"price\"],\n  \"notification\": {\n    \"format\": \"keyValues\",\n    \"endpoint\": {\n      \"uri\": \"http://tutorial:3000/subscription/price-change\",\n      \"accept\": \"application/json\"\n    }\n  },\n   \"@context\": \"http://context/ngsi-context.jsonld\"\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "This example creates a new subscription. The subscription will fire an asynchronous notification to a URL whenever the\ncontext is changed and the conditions of the subscription - Any Changes to Product prices - are met.\n\nNew subscriptions can be added by making a POST request to the `/ngsi-ld/v1/subscriptions/` endpoint.\n\nThe subject section of the request states that the subscription will be fired whenever the price attribute of any\nProduct entity is altered.\n\nThe notification section of the body states that a POST request containing all affected entities will be sent to the\n`http://tutorial:3000/subscription/price-change` endpoint."
					},
					"response": []
				},
				{
					"name": "Delete a Subscription",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/urn:ngsi-ld:Subscription:5fd8a6ff9d82fd9d6ab1ce75",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								"urn:ngsi-ld:Subscription:5fd8a6ff9d82fd9d6ab1ce75"
							]
						},
						"description": "This example deletes the Subscription with `id=urn:ngsi-ld:Subscription:5fd8a6ff9d82fd9d6ab1ce75` from the context.\n\nSubscriptions can be deleted by making a DELETE request to the `/ngsi-ld/v1/subscriptions/<subscription-id>` endpoint.\n"
					},
					"response": []
				},
				{
					"name": "Amend an Existing Subscription",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"notification\": {\n        \"format\": \"normalized\",\n        \"endpoint\": {\n            \"uri\": \"http://tutorial:3000/subscription/price-change\",\n            \"accept\": \"application/json\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/urn:ngsi-ld:Subscription:5fd8a7259d82fd9d6ab1ce76",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								"urn:ngsi-ld:Subscription:5fd8a7259d82fd9d6ab1ce76"
							]
						},
						"description": "This example amends an existing subscription with the ID `urn:ngsi-ld:Subscription:5fd8a6ff9d82fd9d6ab1ce75` and updates the notification URL.\n\nSubscriptions can be updated making a PATCH request to the `/ngsi-ld/v1/subscriptions/<subscription-id>` endpoint."
					},
					"response": []
				},
				{
					"name": "List all Subscriptions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "This example lists all subscriptions by making a GET request to the `/ngsi-ld/v1/subscriptions/` endpoint. The list of subscriptions is limited to the tenant defined by the `NGSILD-Tenant` header (or the default tenant if  the `NGSILD-Tenant` header is not sent )\n\nThe notification section of each subscription will also include the last time the conditions of the subscription were\nmet, and whether associated the POST action was successful."
					},
					"response": []
				},
				{
					"name": "Read the detail of a Subscription",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/urn:ngsi-ld:Subscription:5fd8a7259d82fd9d6ab1ce76",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								"urn:ngsi-ld:Subscription:5fd8a7259d82fd9d6ab1ce76"
							]
						},
						"description": "This example obtains the full details of a subscription with a given ID.\n\nThe response includes additional details in the notification section showing the last time the conditions of the\nsubscription were met, and whether associated the POST action was successful.\n\nSubscription details can be read by making a GET request to the `/ngsi-ld/v1/subscriptions/<subscription-id>` endpoint."
					},
					"response": []
				}
			],
			"description": "The **CRUD** operations for subscriptions map on to the expected HTTP verbs under the `/ngsi-ld/v1/subscriptions/` endpoint.\n\n-   **Create** - HTTP POST\n-   **Read** - HTTP GET\n-   **Update** - HTTP PATCH\n-   **Delete** - HTTP DELETE\n\nThe `<subscription-id>` is auto generated when the subscription is created and returned in Header of the POST response\nto be used by the other operation thereafter.\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "orion",
			"value": "localhost:1026"
		},
		{
			"key": "ngsi-context.jsonld",
			"value": "http://context/ngsi-context.jsonld"
		}
	]
}